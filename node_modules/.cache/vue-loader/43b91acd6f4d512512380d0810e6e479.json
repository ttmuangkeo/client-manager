{"remainingRequest":"/Users/timmuangkeo/Desktop/fork/client-manager/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/timmuangkeo/Desktop/fork/client-manager/src/views/Starter/PartnerConfig.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/timmuangkeo/Desktop/fork/client-manager/src/views/Starter/PartnerConfig.vue","mtime":1706169924667},{"path":"/Users/timmuangkeo/Desktop/fork/client-manager/node_modules/babel-loader/lib/index.js","mtime":1706171926651},{"path":"/Users/timmuangkeo/Desktop/fork/client-manager/node_modules/cache-loader/dist/cjs.js","mtime":1706171925892},{"path":"/Users/timmuangkeo/Desktop/fork/client-manager/node_modules/vue-loader/lib/index.js","mtime":1706171925771}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport partnerData from \"../../json/client-config.json\";\nimport BaseHeader from \"../../components/BaseHeader.vue\";\nimport Vue from \"vue\";\nimport VueClipboard from \"vue-clipboard2\";\nimport LoanOption from \"./LoanOption.vue\";\nimport NewLoanOption from \"./NewLoanOption.vue\";\nVue.use(VueClipboard);\n\nexport default {\n  name: \"partnerConfig\",\n  components: {\n    BaseHeader,\n    VueClipboard,\n    LoanOption,\n    NewLoanOption\n  },\n  data() {\n    return {\n      loanConfig: true,\n      enableAddingNewLoanOption: false,\n      hideLoanOption: false\n    };\n  },\n  mounted() {\n    const self = this;\n    if (!this.partnerData) {\n      self.$store.commit(\"updatePartnerData\", partnerData);\n    }\n  },\n  computed: {\n    findTerms: function () {\n      const self = this;\n      const term = self.$store.getters.partnerData.loanOptions;\n      const newTerm = [];\n      for (const terms in term) {\n        newTerm.push(term[terms].term);\n      }\n      let uniqueTerms = [...new Set(newTerm)];\n      self.$store.commit('updateUniqueTerms', uniqueTerms)\n      return uniqueTerms;\n    },\n  },\n  methods: {\n    onCopy() {\n      this.$notify({\n        type: \"success\",\n        message: \"\",\n      });\n    },\n    getLoanId(loanId) {\n      console.log(loanId);\n      this.$router.push({ name: \"getLoan\", params: { loanId: loanId } });\n    },\n    programFee() {\n      const self = this;\n      const getAllFees = [];\n      const getFees = self.$store.getters.partnerData.loanOptions;\n      getFees.forEach((fees) => {\n        getAllFees.push(fees.programFee);\n      });\n      self.$store.commit(\"updateProgramFee\", getAllFees);\n    },\n    getLatestDealerFee(programFee) {\n      return programFee[programFee.length - 1];\n    },\n    isFlexPay(data) {\n      if (data.id > 1000) {\n        this.promotionalPeriod1(data);\n      } else {\n        console.log(false);\n      }\n    },\n    promotionalPeriod1(data) {\n      if (data.term === \"20\") {\n        console.log(data);\n      }\n    },\n    isString(programFee, promotionalPeriod) {\n      if (typeof programFee == \"string\") {\n        return programFee;\n      } else if (typeof promotionalPeriod == \"string\") {\n        return promotionalPeriod;\n      }\n    },\n    addLoanOption() {\n      const self = this;\n      this.enableAddingNewLoanOption = !this.enableAddingNewLoanOption;\n    },\n    validateSalesforceId(id) {\n      let salesforce = id.substring(0, 3);\n      return (salesforce === '001') ? true : false;\n    },\n    parseOptionMap(index, res) {\n      const self = this;\n      const validated = [];\n      const loanOptionsId = self.$store.getters.partnerData.loanOptions;\n      for (const ids in loanOptionsId) {\n        const filtering = res.filter(\n          (result) => result === loanOptionsId[ids].id\n        );\n        if (filtering.length > 0) {\n          validated.push(...filtering);\n          self.$store.commit(\"updateOptionList\", validated);\n        }\n      }\n      this.loadPartnerData(validated);\n      return null;\n    },\n    loadPartnerData(data) {\n      const self = this;\n      const loanData = self.$store.getters.partnerData.loanOptions;\n      const newPartnerData = [];\n      loanData.forEach((res, index) => {\n        if (this.loanConfig && data.includes(res.id)) {\n          newPartnerData.push(res);\n          self.$store.commit(\"updateNewPartnerData\", newPartnerData);\n          // self.$store.commit('updateNewPartnerData', newPartnerData.programFee)\n        } else if (!this.loanConfig && res.term === data) {\n          newPartnerData.push(res);\n          self.$store.commit(\"updateNewPartnerData\", newPartnerData);\n          // this.newProgramFee(newPartnerData);\n        } else {\n          return null\n        }\n      });\n    },\n  },\n};\n",{"version":3,"sources":["PartnerConfig.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"PartnerConfig.vue","sourceRoot":"src/views/Starter","sourcesContent":["<template>\n  <div>\n    <!-- BootstrapVue Done -->\n    <base-header class=\"pb-6 pb-8 pt-5 pt-md-8 bg-transparent\">\n      <h1 v-html=\"$store.getters.partnerData.name\"></h1>\n      <button\n        type=\"button\"\n        class=\"btn\"\n        v-clipboard:copy=\"$store.getters.partnerData.organizationId\"\n        v-clipboard:success=\"onCopy\"\n        title=\"\"\n        data-original-title=\"Copy to clipboard\"\n      >\n        <div>\n          <p>OrgID</p>\n          <span v-html=\"$store.getters.partnerData.organizationId\"></span>\n        </div>\n      </button>\n      <button\n        type=\"button\"\n        class=\"btn\"\n        v-clipboard:copy=\"$store.getters.partnerData.id\"\n        v-clipboard:success=\"onCopy\"\n        title=\"\"\n        data-original-title=\"Copy to clipboard\"\n      >\n        <div>\n          <div>\n            <p>ID</p>\n            <span v-html=\"$store.getters.partnerData.id\"></span>\n          </div>\n        </div>\n      </button>\n      <button\n        type=\"button\"\n        class=\"btn\"\n        v-clipboard:copy=\"$store.getters.partnerData.salesforce.accountId\"\n        v-clipboard:success=\"onCopy\"\n        title=\"\"\n        data-original-title=\"Copy to clipboard\"\n      >\n        <div>\n          <div>\n            <p>Salesforce ID</p>\n            <span v-html=\"$store.getters.partnerData.salesforce.accountId\"></span>\n            <div v-if=\"!validateSalesforceId($store.getters.partnerData.salesforce.accountId)\">\n              <p class=\"text-warning\">not a salesforce ID</p>\n            </div>\n          </div>\n        </div>\n      </button>\n      <div>\n        <ul v-for=\"(fee, key) in $store.getters.programFee\" :key=\"key\">\n          <li>{{ fee + \"%\" }}</li>\n        </ul>\n      </div>\n      <hr />\n      <!-- Card stats -->\n      <b-row>\n        <b-col xl=\"3\" md=\"6\">\n          <stats-card\n            title=\"Vital Info\"\n            type=\"gradient-orange\"\n            :sub-title=\"$store.getters.partnerData.vitalInfo.email\"\n            class=\"mb-4\"\n          >\n            <template slot=\"footer\">\n              <p v-html=\"$store.getters.partnerData.vitalInfo.address.city\"></p>\n              <p\n                v-html=\"$store.getters.partnerData.vitalInfo.address.street\"\n                class=\"text-nowrap\"\n              ></p>\n              <p v-html=\"$store.getters.partnerData.vitalInfo.email\"></p>\n            </template>\n          </stats-card>\n        </b-col>\n        <b-col xl=\"3\" md=\"6\">\n          <stats-card\n            title=\"Installation Category\"\n            type=\"gradient-green\"\n            :sub-title=\"$store.getters.partnerData.installationCategories\"\n            class=\"mb-4\"\n          >\n          </stats-card>\n        </b-col>\n        <b-col xl=\"3\" md=\"6\">\n      <button\n        type=\"button\"\n        class=\"btn\"\n        v-clipboard:copy=\"$store.getters.partnerData.communicationOptions.admin\"\n        v-clipboard:success=\"onCopy\"\n        title=\"\"\n        data-original-title=\"Copy to clipboard\"\n      >\n        <div>\n          <p>Admin Email</p>\n          <span v-html=\"$store.getters.partnerData.communicationOptions.admin\"></span>\n        </div>\n      </button>\n        </b-col>\n        <b-col xl=\"2\" md=\"6\">\n          <stats-card\n            title=\"Sub650\"\n            type=\"gradient-green\"\n            :sub-title=\"$store.getters.partnerData.features.sub650\"\n            class=\"mb-4\"\n          >\n          </stats-card>\n        </b-col>\n      </b-row>\n    </base-header>\n    <b-container fluid class=\"mt--6\">\n      <button @click=\"loanConfig = !loanConfig\" class=\"btn btn-secondary mb-4\">\n        mapping/term\n      </button>\n      <button @click=\"addLoanOption\" type=\"button\" class=\"btn btn-success mb-4\">\n        <span>Add New Option</span>\n      </button>\n      <b-row v-show=\"enableAddingNewLoanOption\">\n        <newLoanOption/>\n      </b-row>      \n      <!-- <button @click=\"programFee\" type=\"button\" class=\"btn btn-secondary mb-4\">\n        <span>program fees</span>\n      </button> -->\n      <b-row v-show=\"loanConfig\">\n        <b-col\n          lg=\"1\"\n          v-for=\"(key, res) in $store.getters.partnerData.loanOptionsMap\"\n          :key=\"key\"\n        >\n          <p @click=\"parseOptionMap(res, key)\" class=\"mb-3\">\n            <span class=\"btn\">{{ res }}</span>\n          </p>\n        </b-col>\n      </b-row>\n      <b-row v-show=\"!loanConfig\">\n        <b-col lg=\"2\" v-for=\"(res, key) in findTerms\" :key=\"key\">\n          <p @click=\"loadPartnerData(res)\" class=\"mb-3\">\n            <button\n              type=\"button\"\n              class=\"btn-icon-clipboard\"\n              v-clipboard:success=\"onCopy\"\n              title=\"\"\n              :data-original-title=\"Success\"\n            >\n              <div>Term: \n                <span>{{ res }}</span>\n              </div>\n            </button>\n          </p>\n        </b-col>\n        <!-- <b-col lg=\"2\">\n          <p @click=\"loadPartnerData($store.getters.newPartnerData.loanOptions)\">all</p>\n        </b-col>      -->\n      </b-row>\n    </b-container>\n    <b-container fluid>\n      <loanOption />\n    </b-container>\n  </div>\n</template>\n<script>\nimport partnerData from \"../../json/client-config.json\";\nimport BaseHeader from \"../../components/BaseHeader.vue\";\nimport Vue from \"vue\";\nimport VueClipboard from \"vue-clipboard2\";\nimport LoanOption from \"./LoanOption.vue\";\nimport NewLoanOption from \"./NewLoanOption.vue\";\nVue.use(VueClipboard);\n\nexport default {\n  name: \"partnerConfig\",\n  components: {\n    BaseHeader,\n    VueClipboard,\n    LoanOption,\n    NewLoanOption\n  },\n  data() {\n    return {\n      loanConfig: true,\n      enableAddingNewLoanOption: false,\n      hideLoanOption: false\n    };\n  },\n  mounted() {\n    const self = this;\n    if (!this.partnerData) {\n      self.$store.commit(\"updatePartnerData\", partnerData);\n    }\n  },\n  computed: {\n    findTerms: function () {\n      const self = this;\n      const term = self.$store.getters.partnerData.loanOptions;\n      const newTerm = [];\n      for (const terms in term) {\n        newTerm.push(term[terms].term);\n      }\n      let uniqueTerms = [...new Set(newTerm)];\n      self.$store.commit('updateUniqueTerms', uniqueTerms)\n      return uniqueTerms;\n    },\n  },\n  methods: {\n    onCopy() {\n      this.$notify({\n        type: \"success\",\n        message: \"\",\n      });\n    },\n    getLoanId(loanId) {\n      console.log(loanId);\n      this.$router.push({ name: \"getLoan\", params: { loanId: loanId } });\n    },\n    programFee() {\n      const self = this;\n      const getAllFees = [];\n      const getFees = self.$store.getters.partnerData.loanOptions;\n      getFees.forEach((fees) => {\n        getAllFees.push(fees.programFee);\n      });\n      self.$store.commit(\"updateProgramFee\", getAllFees);\n    },\n    getLatestDealerFee(programFee) {\n      return programFee[programFee.length - 1];\n    },\n    isFlexPay(data) {\n      if (data.id > 1000) {\n        this.promotionalPeriod1(data);\n      } else {\n        console.log(false);\n      }\n    },\n    promotionalPeriod1(data) {\n      if (data.term === \"20\") {\n        console.log(data);\n      }\n    },\n    isString(programFee, promotionalPeriod) {\n      if (typeof programFee == \"string\") {\n        return programFee;\n      } else if (typeof promotionalPeriod == \"string\") {\n        return promotionalPeriod;\n      }\n    },\n    addLoanOption() {\n      const self = this;\n      this.enableAddingNewLoanOption = !this.enableAddingNewLoanOption;\n    },\n    validateSalesforceId(id) {\n      let salesforce = id.substring(0, 3);\n      return (salesforce === '001') ? true : false;\n    },\n    parseOptionMap(index, res) {\n      const self = this;\n      const validated = [];\n      const loanOptionsId = self.$store.getters.partnerData.loanOptions;\n      for (const ids in loanOptionsId) {\n        const filtering = res.filter(\n          (result) => result === loanOptionsId[ids].id\n        );\n        if (filtering.length > 0) {\n          validated.push(...filtering);\n          self.$store.commit(\"updateOptionList\", validated);\n        }\n      }\n      this.loadPartnerData(validated);\n      return null;\n    },\n    loadPartnerData(data) {\n      const self = this;\n      const loanData = self.$store.getters.partnerData.loanOptions;\n      const newPartnerData = [];\n      loanData.forEach((res, index) => {\n        if (this.loanConfig && data.includes(res.id)) {\n          newPartnerData.push(res);\n          self.$store.commit(\"updateNewPartnerData\", newPartnerData);\n          // self.$store.commit('updateNewPartnerData', newPartnerData.programFee)\n        } else if (!this.loanConfig && res.term === data) {\n          newPartnerData.push(res);\n          self.$store.commit(\"updateNewPartnerData\", newPartnerData);\n          // this.newProgramFee(newPartnerData);\n        } else {\n          return null\n        }\n      });\n    },\n  },\n};\n</script>\n<style></style>\n"]}]}